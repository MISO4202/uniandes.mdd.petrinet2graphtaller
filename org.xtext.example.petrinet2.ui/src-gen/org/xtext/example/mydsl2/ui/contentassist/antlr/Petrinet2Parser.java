/*
 * generated by Xtext
 */
package org.xtext.example.mydsl2.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl2.services.Petrinet2GrammarAccess;

public class Petrinet2Parser extends AbstractContentAssistParser {
	
	@Inject
	private Petrinet2GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl2.ui.contentassist.antlr.internal.InternalPetrinet2Parser createParser() {
		org.xtext.example.mydsl2.ui.contentassist.antlr.internal.InternalPetrinet2Parser result = new org.xtext.example.mydsl2.ui.contentassist.antlr.internal.InternalPetrinet2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getPetrinetAccess().getGroup(), "rule__Petrinet__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getPlaceAccess().getGroup(), "rule__Place__Group__0");
					put(grammarAccess.getOutputArcAccess().getGroup(), "rule__OutputArc__Group__0");
					put(grammarAccess.getInputArcAccess().getGroup(), "rule__InputArc__Group__0");
					put(grammarAccess.getPetrinetAccess().getElementsAssignment_21(), "rule__Petrinet__ElementsAssignment_21");
					put(grammarAccess.getTransitionAccess().getNameAssignment_4(), "rule__Transition__NameAssignment_4");
					put(grammarAccess.getPlaceAccess().getNameAssignment_4(), "rule__Place__NameAssignment_4");
					put(grammarAccess.getOutputArcAccess().getNameAssignment_4(), "rule__OutputArc__NameAssignment_4");
					put(grammarAccess.getOutputArcAccess().getToAssignment_7(), "rule__OutputArc__ToAssignment_7");
					put(grammarAccess.getOutputArcAccess().getFromAssignment_10(), "rule__OutputArc__FromAssignment_10");
					put(grammarAccess.getInputArcAccess().getNameAssignment_4(), "rule__InputArc__NameAssignment_4");
					put(grammarAccess.getInputArcAccess().getToAssignment_7(), "rule__InputArc__ToAssignment_7");
					put(grammarAccess.getInputArcAccess().getFromAssignment_10(), "rule__InputArc__FromAssignment_10");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl2.ui.contentassist.antlr.internal.InternalPetrinet2Parser typedParser = (org.xtext.example.mydsl2.ui.contentassist.antlr.internal.InternalPetrinet2Parser) parser;
			typedParser.entryRulePetrinet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Petrinet2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Petrinet2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
